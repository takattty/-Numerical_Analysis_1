step 1.    
    まずプログラム sample01_FNC.c を打ち込んで、走らせて見る。
    数学関数ライブラリーをリンクするための -lm オプションを必ず付けること。
    プログラムの2行目の、#include で数学関数ライブラリーのファイルを取り込んでいる。
    このプログラムでは数学関数ライブラリーにある，三角関数やπの値を使っている。
        gcc -o [実行ファイル名] -lm [自分のCプログラムのファイル名.c]

    上の括弧[...]は外すこと。-o オプションを使わなかったら、Linux では a.out という名前の実行可能ファイルができる。
実行ファイル名を他のプログラムのファイル名等と同じものにしない事。

step 2.
    gnuplot を使って実行結果をグラフにしてみる。実行とグラフの作り方の流れを復習しよう。

　　　　(1)　実行結果が入ったデータファイルを作る。
          これを作るには，実行結果をファイルにリダイレクトするのだった。
          つまり、step 1 で作った実行ファイルを実行する時に、

              実行ファイルの名前 > データファイルの名前

          とする。

　　　　(2)　データファイルをgnuplotで読み込んでグラフにする。
          gnuplot を起動し

              plot 'データファイルの名前' u 1:

          と打ってみる。
          "u 1:2" は1コラム目をx軸のデータに、2コラム目をy軸のデータに使う(using 1:2) の意味である。
          "w l" は、"with lines" の意味で、データ点を線で結ぶという意味である。
          この代わりに "w lp"　を使っても良い。これは、"with linespoints"の意味で、データ点に目印の点をつけて、かつ、線で結ぶ。

step 3.
    プログラムの中の、function文の所のサイン関数を課題1−3の中で挙げた他の2つの関数に置き換えてみて、グラフが正しく描けるか確かめよ。


step 4.
    sample02_interpolation.c のプログラムをよく読んで理解しながら打ち込み、実行してみる。
    このプログラムでは、関数の値を出力すると同時に補間多項式による近似値も出力する。
    これらを同じグラフの中にプロットして、補間多項式がどのぐらい厳密な関数のグラフからずれているか確かめよ。
    この違いをより定量的に調べるために、このプログラムでは、関数の値と補間多項式による近似値の間の相対誤差も出力される。このグラフも作ってみよ。


step 5. チェビシェフ多項式のゼロ点を abscissas に使う方法については説明しないので、興味のあるものは
        調べてみよ。